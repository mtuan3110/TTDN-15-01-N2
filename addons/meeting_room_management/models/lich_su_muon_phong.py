from odoo import models, fields, api, _
from odoo.exceptions import ValidationError
import logging

_logger = logging.getLogger(__name__)

class LichSuMuonPhong(models.Model):
    _name = 'lich_su_muon_phong'
    _description = 'L·ªãch s·ª≠ m∆∞·ª£n ph√≤ng'
    _order = 'start_time desc'

    room_id = fields.Many2one('phong_hop', string='Ph√≤ng h·ªçp', required=True, ondelete='cascade')
    requester = fields.Many2one('res.users', string='Ng∆∞·ªùi m∆∞·ª£n', required=True, ondelete='restrict')
    phone = fields.Char(string='S·ªë ƒëi·ªán tho·∫°i')
    email = fields.Char(string='Email')
    start_time = fields.Datetime(string='B·∫Øt ƒë·∫ßu', required=True)
    end_time = fields.Datetime(string='K·∫øt th√∫c', required=True)
    status = fields.Selection([
        ('completed', 'Ho√†n th√†nh'),
        ('cancelled', 'ƒê√£ h·ªßy')
    ], string='Tr·∫°ng th√°i', default='completed', required=True)

    @api.constrains('start_time', 'end_time')
    def _check_time_validity(self):
        """ ƒê·∫£m b·∫£o th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n th·ªùi gian k·∫øt th√∫c """
        for record in self:
            if record.start_time >= record.end_time:
                raise ValidationError(_('Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n th·ªùi gian k·∫øt th√∫c.'))

    @api.model
    def create_history(self, booking):
        """ T·∫°o b·∫£n ghi l·ªãch s·ª≠ t·ª´ m·ªôt l·∫ßn ƒëƒÉng k√Ω m∆∞·ª£n ph√≤ng """
        if not booking or not booking.room_id or not booking.requester:
            _logger.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o l·ªãch s·ª≠: Thi·∫øu th√¥ng tin quan tr·ªçng!")
            return False  

        status = 'completed' if booking.status == 'approved' else 'cancelled'

        _logger.info(f"üìå T·∫°o l·ªãch s·ª≠: Ph√≤ng {booking.room_id.name}, Ng∆∞·ªùi m∆∞·ª£n {booking.requester.name}, Tr·∫°ng th√°i: {status}")

        return self.create({
            'room_id': booking.room_id.id,
            'requester': booking.requester.id,
            'phone': booking.requester.phone,
            'email': booking.requester.email,
            'start_time': booking.start_time,
            'end_time': booking.end_time,
            'status': status
        })

    @api.model
    def create(self, vals):
        """ Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi t·∫°o b·∫£n ghi """
        _logger.info(f"üîπ ƒêang t·∫°o l·ªãch s·ª≠ m∆∞·ª£n ph√≤ng v·ªõi d·ªØ li·ªáu: {vals}")

        if 'room_id' not in vals or not vals.get('room_id'):
            raise ValidationError(_('Kh√¥ng th·ªÉ t·∫°o l·ªãch s·ª≠: Thi·∫øu th√¥ng tin ph√≤ng h·ªçp.'))
        if 'requester' not in vals or not vals.get('requester'):
            raise ValidationError(_('Kh√¥ng th·ªÉ t·∫°o l·ªãch s·ª≠: Thi·∫øu th√¥ng tin ng∆∞·ªùi m∆∞·ª£n.'))
        
        return super(LichSuMuonPhong, self).create(vals)

    def write(self, vals):
        """ C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† g·ª≠i th√¥ng b√°o """
        result = super(LichSuMuonPhong, self).write(vals)
        if 'status' in vals:
            for rec in self:
                message = "Y√™u c·∫ßu ƒë·∫∑t ph√≤ng c·ªßa b·∫°n ƒë√£ ho√†n th√†nh." if rec.status == 'completed' else "Y√™u c·∫ßu ƒë·∫∑t ph√≤ng c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy."
                rec.send_notification(message)
        return result

    def send_notification(self, message):
        """ G·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi ƒë·∫∑t ph√≤ng """
        for rec in self:
            if not rec.requester or not rec.requester.partner_id:
                _logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o: Ng∆∞·ªùi m∆∞·ª£n ph√≤ng {rec.requester.name} kh√¥ng c√≥ partner_id!")
                continue

            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': 'Th√¥ng b√°o',
                    'message': message,
                    'type': 'info',
                    'sticky': False,
                }
            }
